{"version":3,"sources":["common/Preloader/preloader.svg","common/Preloader/Preloader.module.css","slice/todos/todoSlice.js","component/Navbar/Navbar.module.scss","component/FormTodoItem/FormTodoItem.module.scss","component/TodoItem/TodoItem.module.scss","component/BtnAddTodo/BtnAddTodo.js","common/FormsControls/FormsControls.js","component/FormTodoItem/FormTodoItem.js","common/utils/validators.js","component/NewTodoItem/NewTodoItem.js","component/TodoItem/TodoItem.js","slice/todos/todoSelector.js","component/TodoList/TodoList.js","component/Inbox/Inbox.js","component/SortBtn/SortBtn.js","component/SortControls/SortControls.js","component/Today/Today.js","component/Calendar/Calendar.js","component/Navbar/Navbar.js","common/Preloader/Preloader.js","component/ToggleTheme/ToggleTheme.js","component/ToggleNavbar/ToggleNavbar.js","App/App.js","App/rootReducer.js","App/store.js","index.js","common/FormsControls/FormsControls.module.scss","App/App.module.scss","slice/app/appSlice.js","component/BtnAddTodo/BtnAddTodo.module.scss","component/Inbox/Inbox.module.scss","component/Today/Today.module.scss","component/Calendar/Calendar.module.scss","component/ToggleTheme/ToggleTheme.module.scss","component/ToggleNavbar/ToggleNavbar.module.scss"],"names":["module","exports","todoSlice","createSlice","name","initialState","todoList","JSON","parse","localStorage","getItem","sortType","allSortType","isReverseSort","reducers","sendTodoItem","state","action","newItem","text","payload","id","Date","now","completed","changeTodoItemText","map","item","toggleCompleted","deleteTodoItem","filter","sortBy","sort","doReverseSort","actions","Container","compose","memo","props","className","styles","BtnAddTodo","iconAdd","btnBody","FormsControls","input","meta","children","required","hasError","touched","error","value","length","undefined","formControl","textError","Component","textarea","reduxForm","form","enableReinitialize","handleSubmit","initialize","cancelClick","dispatch","useDispatch","fieldRef","useRef","useState","active","setActive","focusField","setFocusField","valueField","setValueField","useEffect","todo","Handle","current","innerText","onSubmit","formData","reset","focus","changeField","evt","target","toggleFocus","prev","cancel","maxLength","maxLengthCreator","FormTodoItem","containerField","onClick","field","onSelect","onFocus","onBlur","contentEditable","ref","Field","validate","component","type","placeholder","autoComplete","containerBtn","btn","send","toggleActivate","activateNull","activateId","inputBodyRef","TodoItem","check","success","checked","onChange","todoBody","change","delete","TodoSelector","getSortedTodoList","createSelector","items","isReverse","list","a","b","reverse","useSelector","activeField","setActiveField","setItem","stringify","TodoList","key","Inbox","title","Today","Calendar","Navbar","link","activeClassName","to","Preloader","preloader","src","alt","isDarkTheme","toggle","ToggleTheme","darkTheme","isActiveNavbar","ToggleNavbar","setIsDarkTheme","setIsActiveNavbar","initialized","app","initializedSuccess","callback","App","header","nav","main","path","render","exact","rootReducer","combineReducers","appReducer","todoReducer","formReducer","store","configureStore","reducer","require","default","ReactDOM","basename","document","getElementById","appSlice"],"mappings":"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","file":"static/js/main.6cc1e1d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.88596d71.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3uOPd\"};","import { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nconst todoSlice = createSlice({\r\n    name: `todo`,\r\n    initialState: {\r\n        todoList: JSON.parse(localStorage.getItem(`todoList`)) || [],\r\n        sortType: `date`,\r\n        allSortType: [`date`, `done`],\r\n        isReverseSort: false,\r\n    },\r\n    reducers: {\r\n        sendTodoItem(state, action) {\r\n            const { text } = action.payload\r\n            const newItem = {\r\n                text,\r\n                id: +`${Date.now()}`,\r\n                completed: false,\r\n            }\r\n            state.todoList = [\r\n                ...state.todoList, \r\n                newItem\r\n            ]\r\n        },\r\n        changeTodoItemText(state, action) {\r\n            const { text, id } = action.payload\r\n            state.todoList = state.todoList\r\n                .map((item) => item.id === id\r\n                    ? {\r\n                        ...item,\r\n                        text\r\n                    }\r\n                    : item\r\n                )\r\n        },\r\n        toggleCompleted(state, action) {\r\n            const { id } = action.payload\r\n            state.todoList = state.todoList\r\n                .map(item => item.id === id\r\n                    ? {\r\n                        ...item,\r\n                        completed: !item.completed\r\n                    }\r\n                    : item\r\n                )\r\n        },\r\n        deleteTodoItem(state, action) {\r\n            const { id } = action.payload\r\n            state.todoList = state.todoList\r\n                .filter(item => item.id !== id)\r\n        },\r\n        sortBy(state, action) {\r\n            const { sort } = action.payload\r\n            state.sortType = sort\r\n        },\r\n        doReverseSort(state, action) {\r\n            const { isReverseSort } = action.payload\r\n            state.isReverseSort = isReverseSort\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const { sendTodoItem, changeTodoItemText, toggleCompleted, deleteTodoItem, sortBy, doReverseSort } = todoSlice.actions\r\n\r\nexport default todoSlice.reducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__1Vmo0\",\"list\":\"Navbar_list__1Uqju\",\"item\":\"Navbar_item__3JVtF\",\"link\":\"Navbar_link__3_hBE\",\"active\":\"Navbar_active__33JtP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormTodoItem\":\"FormTodoItem_FormTodoItem__1db-g\",\"containerField\":\"FormTodoItem_containerField__2mnLG\",\"active\":\"FormTodoItem_active__1uhvq\",\"field\":\"FormTodoItem_field__2xG69\",\"containerBtn\":\"FormTodoItem_containerBtn__1Z523\",\"btn\":\"FormTodoItem_btn__3hh8U\",\"send\":\"FormTodoItem_send__10WvC\",\"cancel\":\"FormTodoItem_cancel__3q96b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoItem\":\"TodoItem_TodoItem__1U3eW\",\"check\":\"TodoItem_check__2CTMX\",\"success\":\"TodoItem_success__2SJGs\",\"todoBody\":\"TodoItem_todoBody__T5owV\",\"btn\":\"TodoItem_btn__xAiIa\",\"change\":\"TodoItem_change__4qCH5\",\"delete\":\"TodoItem_delete__31ZoF\"};","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport styles from './BtnAddTodo.module.scss'\r\n\r\n\r\nconst BtnAddTodo = ({ ...props }) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName={`${styles.BtnAddTodo}`}\r\n\t\t\t{...props}>\r\n\r\n\t\t\t<span className={`${styles.iconAdd}`}></span>\r\n\t\t\t\r\n\t\t\t<span className={`${styles.btnBody}`}>Добавить задачу</span>\r\n\t\t</button>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(BtnAddTodo)\r\n\r\nexport { Container as BtnAddTodo }","import React from 'react'\r\nimport styles from './FormsControls.module.scss'\r\n\r\n\r\nconst FormsControls = ({ input, meta, children, required, ...props }) => {\r\n\tconst hasError = !required\r\n\t\t? input.value.length > 0 && meta.error\r\n\t\t: (meta.touched && meta.error) || (input.value.length > 0 && meta.error)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{children}\r\n\t\t\t<span error={hasError ? hasError : undefined} className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n\t\t\t\t{hasError && <span className={styles.textError}>{meta.error}</span>}\r\n\t\t\t</span>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nexport const Component = {\r\n\ttextarea: ({ ...props }) => (\r\n\t\t<FormsControls {...props}>\r\n\t\t\t<textarea className={styles.text} {...props.input} {...props} />\r\n\t\t</FormsControls>\r\n\t),\r\n\r\n\tinput: ({ ...props }) => (\r\n\t\t<FormsControls required='true' {...props}>\r\n\t\t\t<input className={styles.text} {...props.input} {...props} />\r\n\t\t</FormsControls>\r\n\t)\r\n}\r\n\r\n\r\n// export const createField = (placeholder, name, validators, component, props={}, text=``) => (\r\n//   <p>\r\n//     <Field \r\n//       placeholder={placeholder}\r\n//       name={name}\r\n//       validate={validators}\r\n//       component={Component[component]}\r\n//       {...props}\r\n//     />{text}\r\n//   </p>\r\n// )","import React, { memo, useState, useEffect, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { Field, reduxForm, reset } from 'redux-form'\r\n\r\nimport { sendTodoItem } from '../../slice/todos/todoSlice'\r\nimport { Component } from '../../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator } from '../../common/utils/validators'\r\n\r\nimport styles from './FormTodoItem.module.scss'\r\n\r\n\r\nconst FormTodoItem = ({ text=``, handleSubmit, initialize, cancelClick, ...props }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst fieldRef = useRef(null)\r\n\r\n\tconst [active, setActive] = useState(true)\r\n\tconst [focusField, setFocusField] = useState(false)\r\n\tconst [valueField, setValueField] = useState(text)\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tinitialize({todo: valueField})\r\n\t}, [valueField])\r\n\r\n\tuseEffect(() => {\r\n\t\tactive && Handle.focusField()\r\n\t}, [active])\r\n\r\n\tuseEffect(() => {\r\n\t\tfieldRef.current.innerText = text\r\n\t}, [text])\r\n\r\n\r\n\tconst Handle = {\r\n\t\tonSubmit: (formData) => {\r\n\t\t\tdispatch(sendTodoItem({ text: formData.todo }))\r\n\t\t\tdispatch(reset(`FormTodoItem`))\r\n\t\t\tsetValueField(``)\r\n\t\t\tfieldRef.current.innerText = ``\r\n\t\t\tfieldRef.current.focus()\r\n\t\t},\r\n\t\t// toggleActivate: () => {\r\n\t\t// \tsetActive((prev) => !prev)\r\n\t\t// },\r\n\t\tchangeField: (evt) => {\r\n\t\t\tsetValueField(evt.target.innerText)\r\n\t\t},\r\n\t\ttoggleFocus: () => {\r\n\t\t\tsetFocusField((prev) => !prev)\r\n\t\t},\r\n\t\tfocusField: () => {\r\n\t\t\tfieldRef.current.focus()\r\n\t\t},\r\n\t\tcancel: () => {\r\n\t\t\tfieldRef.current.innerText = text\r\n\t\t\tsetValueField(text)\r\n\t\t\tsetActive(false)\r\n\r\n\t\t\tif(!text) {\r\n\t\t\t\tdispatch(reset(`FormTodoItem`))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst maxLength = maxLengthCreator(2000)\r\n\r\n\r\n\treturn (\r\n\t\t<form \r\n\t\t\tclassName={`${styles.FormTodoItem}`} \r\n\t\t\tonSubmit={handleSubmit(Handle.onSubmit)}>\r\n\t\t\t<div \r\n\t\t\t\tclassName={`\r\n\t\t\t\t\t${styles.containerField}\r\n\t\t\t\t\t${focusField ? styles.active : ``}\r\n\t\t\t\t`}\r\n\t\t\t\tonClick={Handle.focusField}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={`${styles.field}`}\r\n\t\t\t\t\tonSelect={(evt) => Handle.changeField(evt)}\r\n\t\t\t\t\tonFocus={Handle.toggleFocus}\r\n\t\t\t\t\tonBlur={Handle.toggleFocus}\r\n\t\t\t\t\tcontentEditable={`true`}\r\n\t\t\t\t\tref={fieldRef}/>\r\n\r\n\t\t\t\t<Field\r\n\t\t\t\t\tclassName={`visually-hidden`}\r\n\t\t\t\t\tvalidate={[maxLength]}\r\n\t\t\t\t\tcomponent={Component.input}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"todo\"\r\n\t\t\t\t\tplaceholder={`New todo`}\r\n\t\t\t\t\tautoComplete=\"off\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={`${styles.containerBtn}`}>\r\n\t\t\t\t<button className={`${styles.btn} ${styles.send}`}>\r\n\t\t\t\t\tДобавить задачу\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={`${styles.btn} ${styles.cancel}`}\r\n\t\t\t\t\tonClick={Handle.cancel, cancelClick}\r\n\t\t\t\t\ttype={`button`}>\r\n\t\t\t\t\tОтмена\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\treduxForm({ form: `FormTodoItem`, enableReinitialize: true }),\r\n\tmemo\r\n)(FormTodoItem)\r\n\r\nexport { Container as FormTodoItem }","export const required = (value) => {\r\n  return(!value)\r\n    ? `Field is required`\r\n    : undefined\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  return(value && value.length > maxLength)\r\n    ? `Max length is ${maxLength} symbols`\r\n    : undefined\r\n}\r\n\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n  return(value && value.length < minLength)\r\n    ? `Min length is ${minLength} symbols`\r\n    : undefined\r\n}","import React, { memo, useState } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport { BtnAddTodo } from '../BtnAddTodo/BtnAddTodo'\r\nimport { FormTodoItem } from '../FormTodoItem/FormTodoItem'\r\n\r\n\r\nconst NewTodoItem = ({ ...props }) => {\r\n\tconst [active, setActive] = useState(false)\r\n\t\r\n\r\n\tconst Handle = {\r\n\t\ttoggleActivate: () => {\r\n\t\t\tsetActive((prev) => !prev)\r\n\t\t},\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\tactive\r\n\t\t? <FormTodoItem cancelClick={Handle.toggleActivate} />\r\n\t\t// ? <FormTodoItem cancelClick={() => console.log(`hi`)} />\r\n\t\t: <BtnAddTodo onClick={Handle.toggleActivate} />\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(NewTodoItem)\r\n\r\nexport { Container as NewTodoItem }\r\n\r\n\r\n\r\n// import React, { memo, useState, useEffect, useRef } from 'react'\r\n// import { useDispatch } from 'react-redux'\r\n// import { compose } from 'redux'\r\n// import { Field, reduxForm, reset } from 'redux-form'\r\n\r\n// import { sendTodoItem } from '../../slice/todos/todoSlice'\r\n// import { BtnAddTodo } from '../BtnAddTodo/BtnAddTodo'\r\n// import { Component } from '../../common/FormsControls/FormsControls'\r\n// import { maxLengthCreator } from '../../common/utils/validators'\r\n\r\n// import styles from './NewTodoItem.module.scss'\r\n\r\n\r\n// const NewTodoItem = ({ handleSubmit, initialize, ...props }) => {\r\n// \tconst dispatch = useDispatch()\r\n\r\n// \tconst fieldRef = useRef(null)\r\n\r\n// \tconst [active, setActive] = useState(true)\r\n// \tconst [focusField, setFocusField] = useState(false)\r\n// \tconst [valueField, setValueField] = useState(``)\r\n\t\r\n\r\n// \tuseEffect(() => {\r\n// \t\tinitialize({todo: valueField})\r\n// \t}, [valueField])\r\n\r\n// \tuseEffect(() => {\r\n// \t\tactive && Handle.focusField()\r\n// \t}, [active])\r\n\r\n\r\n// \tconst Handle = {\r\n// \t\tonSubmit: (formData) => {\r\n// \t\t\tdispatch(sendTodoItem({ text: formData.todo }))\r\n// \t\t\tdispatch(reset(`newTodoItem`))\r\n// \t\t\tsetValueField(``)\r\n// \t\t\tfieldRef.current.innerText = ``\r\n// \t\t\tfieldRef.current.focus()\r\n// \t\t},\r\n// \t\ttoggleActivate: () => {\r\n// \t\t\tsetActive((prev) => !prev)\r\n// \t\t},\r\n// \t\tchangeField: (evt) => {\r\n// \t\t\tsetValueField(evt.target.innerText)\r\n// \t\t},\r\n// \t\ttoggleFocus: () => {\r\n// \t\t\tsetFocusField((prev) => !prev)\r\n// \t\t},\r\n// \t\tfocusField: () => {\r\n// \t\t\tfieldRef.current.focus()\r\n// \t\t},\r\n// \t\tcancel: () => {\r\n// \t\t\tfieldRef.current.innerText = ``\r\n// \t\t\tsetValueField(``)\r\n// \t\t\tdispatch(reset(`newTodoItem`))\r\n// \t\t\tsetActive(false)\r\n// \t\t}\r\n// \t}\r\n\r\n\r\n// \tconst maxLength = maxLengthCreator(2000)\r\n\r\n\r\n// \treturn (\r\n// \t\tactive\r\n// \t\t? <form \r\n// \t\t\tclassName={`${styles.NewTodoItem}`} \r\n// \t\t\tonSubmit={handleSubmit(Handle.onSubmit)}>\r\n// \t\t\t<div \r\n// \t\t\t\tclassName={`\r\n// \t\t\t\t\t${styles.containerField}\r\n// \t\t\t\t\t${focusField ? styles.active : ``}\r\n// \t\t\t\t`}\r\n// \t\t\t\tonClick={Handle.focusField}>\r\n// \t\t\t\t<div\r\n// \t\t\t\t\tclassName={`${styles.field}`}\r\n// \t\t\t\t\tonSelect={(evt) => Handle.changeField(evt)}\r\n// \t\t\t\t\tonFocus={Handle.toggleFocus}\r\n// \t\t\t\t\tonBlur={Handle.toggleFocus}\r\n// \t\t\t\t\tcontentEditable={`true`}\r\n// \t\t\t\t\tref={fieldRef}/>\r\n\r\n// \t\t\t\t<Field\r\n// \t\t\t\t\tclassName={`visually-hidden`}\r\n// \t\t\t\t\tvalidate={[maxLength]}\r\n// \t\t\t\t\tcomponent={Component.input}\r\n// \t\t\t\t\ttype=\"text\"\r\n// \t\t\t\t\tname=\"todo\"\r\n// \t\t\t\t\tplaceholder={`New todo`}\r\n// \t\t\t\t\tautoComplete=\"off\" />\r\n// \t\t\t</div>\r\n// \t\t\t<div className={`${styles.containerBtn}`}>\r\n// \t\t\t\t<button className={`${styles.btn} ${styles.send}`}>\r\n// \t\t\t\t\tДобавить задачу\r\n// \t\t\t\t</button>\r\n// \t\t\t\t<button \r\n// \t\t\t\t\tclassName={`${styles.btn} ${styles.cancel}`}\r\n// \t\t\t\t\tonClick={Handle.cancel}\r\n// \t\t\t\t\ttype={`button`}>\r\n// \t\t\t\t\tОтмена\r\n// \t\t\t\t</button>\r\n// \t\t\t</div>\r\n// \t\t</form>\r\n\r\n// \t\t: <BtnAddTodo onClick={Handle.toggleActivate} />\r\n// \t)\r\n// }\r\n\r\n\r\n// const Container = compose(\r\n// \treduxForm({ form: `newTodoItem`, enableReinitialize: true }),\r\n// \tmemo\r\n// )(NewTodoItem)\r\n\r\n// export { Container as NewTodoItem }","import React, { memo, useState, useEffect, useRef } from 'react'\r\nimport { compose } from 'redux'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { changeTodoItemText, toggleCompleted, deleteTodoItem } from '../../slice/todos/todoSlice'\r\nimport { FormTodoItem } from '../FormTodoItem/FormTodoItem'\r\n\r\nimport styles from './TodoItem.module.scss'\r\n\r\n\r\nconst TodoItem = ({ activateNull, activateId, active, text, id, completed, ...props }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    // const [disabled, setDisabled] = useState(true)\r\n    // const [active, setActive] = useState(false)\r\n\r\n    const inputBodyRef = useRef(null)\r\n\r\n\r\n    // useEffect(() => {\r\n    //     !disabled && inputBodyRef.current.focus()\r\n    // }, [disabled])\r\n\r\n\r\n    const Handle = {\r\n        changeField: (text, id) => {\r\n            dispatch(changeTodoItemText({ text, id }))\r\n        },\r\n        // activated: () => {\r\n        //     setDisabled(false)\r\n        //     !disabled && inputBodyRef.current.focus()\r\n        // },\r\n        // saveChanges: () => {\r\n        //     setDisabled(!disabled)\r\n        // },\r\n        toggleCompleted: (id) => {\r\n            dispatch(toggleCompleted({ id }))\r\n        },\r\n        deleteTodoItem: (id) => {\r\n            dispatch(deleteTodoItem({ id }))\r\n        },\r\n        // toggleActivate: () => {\r\n        //     setActive((prev) => !prev)\r\n        // },\r\n    }\r\n\r\n    return (\r\n        active\r\n        ? <FormTodoItem \r\n            text={text} \r\n            id={id} \r\n            cancelClick={activateNull} />\r\n\r\n        : <li className={`${styles.TodoItem}`}>\r\n            <label \r\n                className={`\r\n                    ${styles.check} \r\n                    ${completed ? styles.success : ``}`}>\r\n                \r\n                <input\r\n                    className={`visually-hidden`}\r\n                    checked={completed}\r\n                    type='checkbox'\r\n                    onChange={() => Handle.toggleCompleted(id)}/>\r\n            </label>\r\n            <div \r\n                className={`${styles.todoBody}`}\r\n                // onKeyPress={(evt) => evt.key === `Enter` && Handle.saveChanges()}\r\n                ref={inputBodyRef}\r\n                onChange={evt => Handle.changeField(evt.target.value, id)}>\r\n                {text}\r\n            </div>\r\n            <button\r\n                className={`\r\n                    ${styles.btn} \r\n                    ${styles.change}`}\r\n                // onClick={Handle.activated, Handle.toggleActivate}>\r\n                onClick={activateId}>\r\n                change\r\n            </button>\r\n            <button \r\n                className={`\r\n                    ${styles.btn} \r\n                    ${styles.delete}`}\r\n                onClick={() => Handle.deleteTodoItem(id)}>&times;\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nconst Container = compose(\r\n    memo\r\n)(TodoItem)\r\n\r\nexport { Container as TodoItem }\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n// import React, { memo, useState } from 'react'\r\n// import { compose } from 'redux'\r\n\r\n// import { FormTodoItem } from '../FormTodoItem/FormTodoItem'\r\n\r\n// import styles from './TodoItem.module.scss'\r\n\r\n\r\n// const TodoItem = ({ text, id, completed, ...props }) => {\r\n// \tconst [active, setActive] = useState(false)\r\n\t\r\n\r\n// \tconst Handle = {\r\n// \t\ttoggleActivate: () => {\r\n// \t\t\tsetActive((prev) => !prev)\r\n// \t\t},\r\n// \t}\r\n\r\n\r\n// \treturn (\r\n// \t\tactive\r\n//         ? <FormTodoItem \r\n//             text={text} \r\n//             id={id} \r\n//             cancelClick={Handle.toggleActivate} />\r\n//         : <div \r\n//             text={text}>\r\n//             {text}\r\n//         </div>\r\n// \t)\r\n// }\r\n\r\n\r\n// const Container = compose(\r\n// \tmemo\r\n// )(TodoItem)\r\n\r\n// export { Container as TodoItem }\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { memo, useState, useEffect, useRef } from 'react'\r\n// import { compose } from 'redux'\r\n// import { useDispatch } from 'react-redux'\r\n\r\n// import { changeTodoItemText, toggleCompleted, deleteTodoItem } from '../../slice/todos/todoSlice'\r\n\r\n// import styles from './TodoItem.module.scss'\r\n\r\n\r\n// const TodoItem = ({ text, id, completed }) => {\r\n//     const dispatch = useDispatch()\r\n\r\n//     const [disabled, setDisabled] = useState(true)\r\n\r\n//     const inputBodyRef = useRef(null)\r\n\r\n\r\n//     useEffect(() => {\r\n//         !disabled && inputBodyRef.current.focus()\r\n//     }, [disabled])\r\n\r\n\r\n//     const Handle = {\r\n//         changeField: (text, id) => {\r\n//             dispatch(changeTodoItemText({ text, id }))\r\n//         },\r\n//         activated: () => {\r\n//             setDisabled(false)\r\n//             !disabled && inputBodyRef.current.focus()\r\n//         },\r\n//         saveChanges: () => {\r\n//             setDisabled(!disabled)\r\n//         },\r\n//         toggleCompleted: (id) => {\r\n//             dispatch(toggleCompleted({ id }))\r\n//         },\r\n//         deleteTodoItem: (id) => {\r\n//             dispatch(deleteTodoItem({ id }))\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <li className={`${styles.TodoItem}`}>\r\n//             <label \r\n//                 className={`\r\n//                     ${styles.check} \r\n//                     ${completed ? styles.success : ``}`}>\r\n                \r\n//                 <input\r\n//                     className={`visually-hidden`}\r\n//                     checked={completed}\r\n//                     type='checkbox'\r\n//                     onChange={() => Handle.toggleCompleted(id)}/>\r\n//             </label>\r\n//             <textarea\r\n//                 className={`\r\n//                     ${styles.todoBody} \r\n//                     ${!completed ? `border-warning` : `border-success`}`}\r\n//                 onKeyPress={(evt) => evt.key === `Enter` && Handle.saveChanges()}\r\n//                 ref={inputBodyRef}\r\n//                 type='text'\r\n//                 value={text}\r\n//                 onChange={evt => Handle.changeField(evt.target.value, id)}\r\n//                 disabled={disabled}\r\n//             />\r\n//             <button\r\n//                 className={`${styles.btn} ${styles.change}`}\r\n//                 onClick={() => {\r\n//                     disabled\r\n//                         ? Handle.activated()\r\n//                         : Handle.saveChanges()\r\n//                 }}>\r\n//                 {disabled\r\n//                     ? `change`\r\n//                     : `save`\r\n//                 }\r\n//             </button>\r\n//             <button \r\n//                 className={`\r\n//                     ${styles.btn} \r\n//                     ${styles.delete}`}\r\n//                 onClick={() => Handle.deleteTodoItem(id)}>&times;\r\n//             </button>\r\n//         </li>\r\n//     )\r\n// }\r\n\r\n\r\n// const Container = compose(\r\n//     memo\r\n// )(TodoItem)\r\n\r\n// export { Container as TodoItem }","import { createSelector } from 'reselect'\r\n\r\n\r\nconst TodoSelector = {\r\n\ttodoList: (state) => state.todo.todoList,\r\n\tsortType: (state) => state.todo.sortType,\r\n\tisReverseSort: (state) => state.todo.isReverseSort,\r\n}\r\n\r\n\r\nexport const getSortedTodoList = createSelector(\r\n\tTodoSelector.todoList, TodoSelector.sortType, TodoSelector.isReverseSort,\r\n\t(items, sortType, isReverse) => {\r\n\t\tlet list = [...items]\r\n\t\tswitch (sortType) {\r\n\t\t\tcase `date`:\r\n\t\t\t\tlist.sort((a, b) => a.id - b.id)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase `done`:\r\n\t\t\t\tlist.sort((a, b) => a.completed - b.completed)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t!isReverse\r\n\t\t\t\t? list\r\n\t\t\t\t: list.reverse()\r\n\t\t)\r\n\t})","import React, { memo, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { TodoItem } from '../TodoItem/TodoItem'\r\n\r\nimport { getSortedTodoList } from '../../slice/todos/todoSelector'\r\n\r\nimport styles from './TodoList.module.scss'\r\n\r\n\r\nconst TodoList = ({ ...props }) => {\r\n\tconst todoList = useSelector(getSortedTodoList)\r\n\r\n\tconst [activeField, setActiveField] = useState(null)\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(`todoList`, JSON.stringify(todoList))\r\n\t}, [todoList])\r\n\r\n\r\n\tconst Handle = {\r\n\t\t// toggleActivate: (id) => {\r\n\t\t// \tsetActiveField(id)\r\n\t\t// \t// setActiveField((prev) => prev === id ? null : id)\r\n\t\t// },\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<ul className={`${styles.TodoList}`}>\r\n\t\t\t{todoList.map((item) => <TodoItem \r\n\t\t\t\tactive={activeField === item.id} \r\n\t\t\t\t// toggleActivate={() => Handle.toggleActivate(item.id)}\r\n\t\t\t\tactivateId={() => setActiveField(item.id)}\r\n\t\t\t\tactivateNull={() => setActiveField(null)}\r\n\t\t\t\tkey={item.id} \r\n\t\t\t\t{...item} />\r\n\t\t\t)}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(TodoList)\r\n\r\nexport { Container as TodoList }","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport { NewTodoItem } from '../NewTodoItem/NewTodoItem'\r\nimport { TodoList } from '../TodoList/TodoList'\r\n\r\nimport styles from './Inbox.module.scss'\r\n\r\n\r\nconst Inbox = ({ ...props }) => {\r\n\treturn (\r\n\t\t<section className={`${styles.Inbox}`}>\r\n\t\t\t<h2 className={`${styles.title}`}>Входящие</h2>\r\n\t\t\t<TodoList />\r\n\t\t\t<NewTodoItem />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Inbox)\r\n\r\nexport { Container as Inbox } ","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { sortBy, doReverseSort } from '../../slice/todos/todoSlice'\r\n\r\n\r\nconst SortBtn = ({ type, ...props }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { sortType, isReverseSort } = useSelector((state) => state.todo)\t\r\n\t\r\n\t\r\n\tconst onSortedClick = (sort) => {\r\n\t\tdispatch(sortBy({ sort }))\r\n\t\tsortType === sort\r\n\t\t\t? dispatch(doReverseSort({ isReverseSort: !isReverseSort }))\r\n\t\t\t: dispatch(doReverseSort({ isReverseSort: false }))\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<button className={`btn btn-outline-primary ${type === sortType ? `active` : ``}`} onClick={() => onSortedClick(type)}>{type}</button>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(SortBtn)\r\n\r\nexport { Container as SortBtn }","import React, { memo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { SortBtn } from '../SortBtn/SortBtn'\r\n\r\n\r\nconst SortControls = ({ ...props }) => {\r\n\tconst { allSortType } = useSelector((state) => state.todo)\r\n\r\n\r\n\treturn (\r\n\t\t<section className={`btn-group mb-4`}>\r\n\t\t\t{allSortType\r\n\t\t\t\t.map(type => <SortBtn\r\n\t\t\t\t\tkey={type}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\t{...props} />\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(SortControls)\r\n\r\nexport { Container as SortControls } \r\n","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport { NewTodoItem } from '../NewTodoItem/NewTodoItem'\r\nimport { TodoList } from '../TodoList/TodoList'\r\nimport { SortControls } from '../SortControls/SortControls'\r\n\r\nimport styles from './Today.module.scss'\r\n\r\n\r\nconst Today = ({ ...props }) => {\r\n\treturn (\r\n\t\t<section className={`${styles.Today}`}>\r\n\t\t\t<h2 className={`${styles.title} mb-4`}>Сегодня</h2>\r\n\t\t\t<NewTodoItem />\r\n\t\t\t<SortControls />\r\n\t\t\t<TodoList />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Today)\r\n\r\nexport { Container as Today } ","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport { NewTodoItem } from '../NewTodoItem/NewTodoItem'\r\nimport { TodoList } from '../TodoList/TodoList'\r\nimport { SortControls } from '../SortControls/SortControls'\r\n\r\nimport styles from './Calendar.module.scss'\r\n\r\n\r\nconst Calendar = ({ ...props }) => {\r\n\treturn (\r\n\t\t<section className={`${styles.Calendar}`}>\r\n\t\t\t<h2 className={`${styles.title} mb-4`}>Предстоящее</h2>\r\n\t\t\t<NewTodoItem />\r\n\t\t\t<SortControls />\r\n\t\t\t<TodoList />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Calendar)\r\n\r\nexport { Container as Calendar } ","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport styles from './Navbar.module.scss'\r\n\r\n\r\nconst Navbar = ({ ...props }) => {\r\n\treturn (\r\n\t\t<nav className={`${props.className} ${styles.Navbar}`}>\r\n\t\t\t<ul className={`${styles.list}`}>\r\n\t\t\t\t<li className={`${styles.item}`}>\r\n\t\t\t\t\t<NavLink className={`${styles.link}`} activeClassName={styles.active} to={`/inbox`}>Входящие</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className={`${styles.item}`}>\r\n\t\t\t\t\t<NavLink className={`${styles.link}`} activeClassName={styles.active} to={`/today`}>Сегодня</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className={`${styles.item}`}>\r\n\t\t\t\t\t<NavLink className={`${styles.link}`} activeClassName={styles.active} to={`/calendar`}>Календарь</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Navbar)\r\n\r\nexport { Container as Navbar }","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport styles from './Preloader.module.css';\r\n\r\n\r\nexport const Preloader = () => {\r\n\treturn (\r\n\t\t<section className={styles.preloader}>\r\n\t\t\t<img src={preloader} alt='loading' />\r\n\t\t</section>\r\n\t)\r\n}","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport styles from './ToggleTheme.module.scss'\r\n\r\n\r\nconst ToggleTheme = ({ isDarkTheme, toggle, ...props }) => {\r\n    return (\r\n        <button\r\n            className={`\r\n                ${styles.ToggleTheme} \r\n                ${isDarkTheme ? styles.darkTheme : ``} \r\n                btn`}\r\n            onClick={toggle}\r\n        >\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst Container = compose(\r\n    memo\r\n)(ToggleTheme)\r\n\r\nexport { Container as ToggleTheme }","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport styles from './ToggleNavbar.module.scss'\r\n\r\n\r\nconst ToggleNavbar = ({isActiveNavbar, toggle, ...props}) => {\r\n    return (\r\n        <button \r\n            className={`\r\n                ${styles.ToggleNavbar}\r\n                ${isActiveNavbar ? styles.active : ``}\r\n                btn    \r\n            `}\r\n            onClick={toggle}\r\n        >\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst Container = compose(\r\n    memo\r\n)(ToggleNavbar)\r\n\r\nexport { Container as ToggleNavbar }","import React, { memo, useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\n\r\nimport { initializedSuccess } from '../slice/app/appSlice'\r\n\r\nimport { Inbox } from '../component/Inbox/Inbox'\r\nimport { Today } from '../component/Today/Today'\r\nimport { Calendar } from '../component/Calendar/Calendar'\r\nimport { Navbar } from '../component/Navbar/Navbar'\r\nimport { Preloader } from '../common/Preloader/Preloader'\r\nimport { ToggleTheme } from '../component/ToggleTheme/ToggleTheme'\r\nimport { ToggleNavbar } from '../component/ToggleNavbar/ToggleNavbar'\r\n\r\nimport styles from './App.module.scss'\r\n\r\n\r\nconst App = ({ ...props }) => {\r\n\tconst [isDarkTheme, setIsDarkTheme] = useState(false)\r\n\tconst [isActiveNavbar, setIsActiveNavbar] = useState(true)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { initialized } = useSelector((state) => state.app)\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializedSuccess())\r\n\t}, [dispatch])\r\n\r\n\r\n\tconst Handle = {\r\n        toggle: (callback) => {\r\n            callback((prev) => !prev)\r\n        }\r\n    }\r\n\r\n\r\n\treturn (\r\n\t\t!initialized\r\n\t\t\t? <Preloader />\r\n\t\t\t: <div className={`${isDarkTheme ? `darkTheme` : ``} ${styles.App}`}>\r\n\t\t\t\t<header className={`${styles.header}`}>\r\n\t\t\t\t\t<h1 className={`visually-hidden`}>Todo list</h1>\r\n\t\t\t\t\t<ToggleNavbar \r\n\t\t\t\t\t\tisActiveNavbar={isActiveNavbar}\r\n\t\t\t\t\t\ttoggle={() => Handle.toggle(setIsActiveNavbar)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ToggleTheme \r\n\t\t\t\t\t\tisDarkTheme={isDarkTheme} \r\n\t\t\t\t\t\ttoggle={() => Handle.toggle(setIsDarkTheme)} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</header>\r\n\t\t\t\t{isActiveNavbar && <Navbar className={styles.nav}/>}\r\n\t\t\t\t<main className={`${styles.main}`}>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path='/inbox' render={() => <Inbox />} />\r\n\t\t\t\t\t\t<Route path='/today' render={() => <Today />} />\r\n\t\t\t\t\t\t<Route path='/calendar' render={() => <Calendar />} />\r\n\t\t\t\t\t\t<Route path='/' exact render={() => <Inbox />} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default compose(\r\n\tmemo\r\n)(App)","import { combineReducers } from '@reduxjs/toolkit'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport appReducer from '../slice/app/appSlice'\r\nimport todoReducer from '../slice/todos/todoSlice'\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    todo: todoReducer,\r\n    form: formReducer,\r\n})","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport { rootReducer } from './rootReducer'\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n})\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./rootReducer', () => {\r\n        const newRootReducer = require('./rootReducer').default\r\n        store.replaceReducer(newRootReducer)\r\n    })\r\n}\r\n\r\n\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\n//HashRouter для gh-pages\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nimport store from './App/store'\r\n\r\nimport './index.scss'\r\nimport './assets/css/vars.css'\r\nimport './assets/css/reset.css'\r\n\r\n\r\nconst render = () => {\r\n  const App = require('./App/App').default\r\n\r\n  ReactDOM.render(\r\n    <HashRouter basename={'https://cool1997.github.io/portfolio/'}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\nrender()\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./App/App', render)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__14eVv\",\"error\":\"FormsControls_error__1A1JB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__r-SBe\",\"nav\":\"App_nav__2Rq4-\",\"header\":\"App_header__3zq2z\",\"main\":\"App_main__1pf0Z\"};","import { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nconst appSlice = createSlice({\r\n    name: `todos`,\r\n    initialState: {\r\n        initialized: false,\r\n    },\r\n    reducers: {\r\n        initializedSuccess(state, action) {\r\n            state.initialized = true\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const { initializedSuccess } = appSlice.actions\r\n\r\nexport default appSlice.reducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BtnAddTodo\":\"BtnAddTodo_BtnAddTodo__2arYY\",\"iconAdd\":\"BtnAddTodo_iconAdd__1dN0J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Inbox\":\"Inbox_Inbox__Tacsb\",\"title\":\"Inbox_title__3ffS3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Today\":\"Today_Today__3iJbF\",\"title\":\"Today_title__2MsIt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calendar\":\"Calendar_Calendar__3YmlG\",\"title\":\"Calendar_title__1eYe-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToggleTheme\":\"ToggleTheme_ToggleTheme__p55IS\",\"darkTheme\":\"ToggleTheme_darkTheme__1PpTQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToggleNavbar\":\"ToggleNavbar_ToggleNavbar__2aNEC\",\"active\":\"ToggleNavbar_active__3KYv0\"};"],"sourceRoot":""}