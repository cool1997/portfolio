{"version":3,"sources":["common/Preloader/preloader.svg","common/Preloader/Preloader.module.css","slice/todos/todoSlice.js","common/FormsControls/FormsControls.js","component/NewTodoItem/NewTodoItem.js","common/utils/validators.js","component/TodoItem/TodoItem.js","slice/todos/todoSelector.js","component/TodoList/TodoList.js","component/SortBtn/SortBtn.js","component/SortControls/SortControls.js","component/Todo/Todo.js","component/Navbar/Navbar.js","common/Preloader/Preloader.js","App/App.js","App/rootReducer.js","App/store.js","index.js","common/FormsControls/FormsControls.module.scss","slice/app/appSlice.js"],"names":["module","exports","todoSlice","createSlice","name","initialState","todoList","JSON","parse","localStorage","getItem","sortType","allSortType","isReverseSort","reducers","sendTodoItem","state","action","text","payload","id","Date","now","completed","changeTodoItemText","map","item","toggleCompleted","deleteTodoItem","filter","sortBy","sort","doReverseSort","actions","FormsControls","input","meta","children","required","hasError","touched","error","value","length","undefined","className","styles","formControl","textError","Component","textarea","props","Container","compose","reduxForm","form","enableReinitialize","memo","handleSubmit","dispatch","useDispatch","maxLength","maxLengthCreator","onSubmit","formData","todo","reset","Field","validate","component","type","placeholder","autocomplete","useState","disabled","setDisabled","inputBodyRef","useRef","useEffect","current","focus","Handler","checked","onChange","onKeyPress","evt","key","ref","target","onClick","TodoSelector","getSortedTodoList","createSelector","items","isReverse","list","a","b","reverse","useSelector","setItem","stringify","isActive","onSortedClick","typeSort","activeSortBtn","setActiveSortBtn","new","to","Preloader","preloader","src","alt","initialized","app","initializedSuccess","path","render","exact","rootReducer","combineReducers","appReducer","todoReducer","formReducer","store","configureStore","reducer","App","require","default","ReactDOM","basename","document","getElementById","appSlice"],"mappings":"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","file":"static/js/main.8573ea01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.7869e84b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__Kjxcy\"};","import { createSlice } from '@reduxjs/toolkit'\n\n\nconst todoSlice = createSlice({\n    name: `todo`,\n    initialState: {\n        todoList: JSON.parse(localStorage.getItem(`todoList`)) || [],\n        sortType: `date`,\n        allSortType: [`date`, `done`],\n        isReverseSort: false,\n    },\n    reducers: {\n        sendTodoItem(state, action) {\n            const { text } = action.payload\n            state.todoList = [...state.todoList, { text, id: +`${Date.now()}`, completed: false }]\n        },\n        changeTodoItemText(state, action) {\n            const { text, id } = action.payload\n            state.todoList = state.todoList\n                .map((item) => item.id === id\n                    ? {\n                        ...item,\n                        text\n                    }\n                    : item\n                )\n        },\n        toggleCompleted(state, action) {\n            const { id } = action.payload\n            state.todoList = state.todoList\n                .map(item => item.id === id\n                    ? {\n                        ...item,\n                        completed: !item.completed\n                    }\n                    : item\n                )\n        },\n        deleteTodoItem(state, action) {\n            const { id } = action.payload\n            state.todoList = state.todoList\n                .filter(item => item.id !== id)\n        },\n        sortBy(state, action) {\n            const { sort } = action.payload\n            state.sortType = sort\n        },\n        doReverseSort(state, action) {\n            const { isReverseSort } = action.payload\n            state.isReverseSort = isReverseSort\n        }\n    }\n})\n\n\nexport const { sendTodoItem, changeTodoItemText, toggleCompleted, deleteTodoItem, sortBy, doReverseSort } = todoSlice.actions\n\nexport default todoSlice.reducer","import React from 'react'\r\nimport styles from './FormsControls.module.scss'\r\n\r\n\r\nconst FormsControls = ({ input, meta, children, required, ...props }) => {\r\n\tconst hasError = !required\r\n\t\t? input.value.length > 0 && meta.error\r\n\t\t: (meta.touched && meta.error) || (input.value.length > 0 && meta.error)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{children}\r\n\t\t\t<span error={hasError ? hasError : undefined} className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n\t\t\t\t{hasError && <span className={styles.textError}>{meta.error}</span>}\r\n\t\t\t</span>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nexport const Component = {\r\n\ttextarea: ({ ...props }) => (\r\n\t\t<FormsControls {...props}>\r\n\t\t\t<textarea className={styles.text} {...props.input} {...props} />\r\n\t\t</FormsControls>\r\n\t),\r\n\r\n\tinput: ({ ...props }) => (\r\n\t\t<FormsControls required='true' {...props}>\r\n\t\t\t<input className={styles.text} {...props.input} {...props} />\r\n\t\t</FormsControls>\r\n\t)\r\n}\r\n\r\n\r\n// export const createField = (placeholder, name, validators, component, props={}, text=``) => (\r\n//   <p>\r\n//     <Field \r\n//       placeholder={placeholder}\r\n//       name={name}\r\n//       validate={validators}\r\n//       component={Component[component]}\r\n//       {...props}\r\n//     />{text}\r\n//   </p>\r\n// )","import React, { memo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { Field, reduxForm, reset } from 'redux-form'\r\n\r\nimport { sendTodoItem } from '../../slice/todos/todoSlice'\r\nimport { Component } from '../../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator } from '../../common/utils/validators'\r\n\r\n\r\nconst NewTodoItem = ({ handleSubmit, ...props }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\r\n\tconst onSubmit = (formData) => {\r\n\t\tdispatch(sendTodoItem({ text: formData.todo }))\r\n\t\tdispatch(reset(`newTodoItem`))\r\n\t}\r\n\r\n\r\n\tconst maxLength = maxLengthCreator(30)\r\n\r\n\r\n\treturn (\r\n\t\t<form className={`input-group mb-2`} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<Field\r\n\t\t\t\tvalidate={[maxLength]}\r\n\t\t\t\tcomponent={Component.input}\r\n\t\t\t\tclassName={`form-control`}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"todo\"\r\n\t\t\t\tplaceholder={`New todo`}\r\n\t\t\t\tautocomplete=\"off\" />\r\n\t\t\t<button className={`btn btn-outline-success form-control col-2`}>send</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\treduxForm({ form: `newTodoItem`, enableReinitialize: true }),\r\n\tmemo\r\n)(NewTodoItem)\r\n\r\nexport { Container as NewTodoItem }","export const required = (value) => {\r\n  return(!value)\r\n    ? `Field is required`\r\n    : undefined\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  return(value && value.length > maxLength)\r\n    ? `Max length is ${maxLength} symbols`\r\n    : undefined\r\n}\r\n\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n  return(value && value.length < minLength)\r\n    ? `Min length is ${minLength} symbols`\r\n    : undefined\r\n}","import React, { memo, useState, useEffect, useRef } from 'react'\r\nimport { compose } from 'redux'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { changeTodoItemText, toggleCompleted, deleteTodoItem } from '../../slice/todos/todoSlice'\r\n\r\n\r\nconst TodoItem = ({ text, id, completed }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    const inputBodyRef = useRef(null)\r\n\r\n\r\n    useEffect(() => {\r\n        !disabled && inputBodyRef.current.focus()\r\n    }, [disabled])\r\n\r\n\r\n    const Handler = {\r\n        changeField: (text, id) => {\r\n            dispatch(changeTodoItemText({ text, id }))\r\n        },\r\n        activated: () => {\r\n            setDisabled(false)\r\n            !disabled && inputBodyRef.current.focus()\r\n        },\r\n        saveChanges: () => {\r\n            setDisabled(!disabled)\r\n        },\r\n        toggleCompleted: (id) => {\r\n            dispatch(toggleCompleted({ id }))\r\n        },\r\n        deleteTodoItem: (id) => {\r\n            dispatch(deleteTodoItem({ id }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className={`list-group-item`}>\r\n            <div className={`input-group `}>\r\n                <div className={`input-group-prepend`}>\r\n                    <div className={`input-group-text ${!completed ? `border-warning` : `border-success`}`}>\r\n                        <input\r\n                            checked={completed}\r\n                            type='checkbox'\r\n                            onChange={() => Handler.toggleCompleted(id)} />\r\n                    </div>\r\n                </div>\r\n                <input\r\n                    onKeyPress={(evt) => evt.key === `Enter` && Handler.saveChanges()}\r\n                    ref={inputBodyRef}\r\n                    type='text'\r\n                    className={`form-control bg-light ${!completed ? `border-warning` : `border-success`}`}\r\n                    value={text}\r\n                    onChange={evt => Handler.changeField(evt.target.value, id)}\r\n                    disabled={disabled} />\r\n                <button\r\n                    className={`btn btn-primary form-control col-2`}\r\n                    onClick={() => {\r\n                        disabled\r\n                            ? Handler.activated()\r\n                            : Handler.saveChanges()\r\n                    }}>\r\n                    {disabled\r\n                        ? `change`\r\n                        : `save`\r\n                    }\r\n                </button>\r\n                <button className={`btn btn-danger form-control col-1`}\r\n                    onClick={() => Handler.deleteTodoItem(id)}>&times;</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nconst Container = compose(\r\n    memo\r\n)(TodoItem)\r\n\r\nexport { Container as TodoItem }","import { createSelector } from 'reselect'\r\n\r\n\r\nconst TodoSelector = {\r\n\ttodoList: (state) => state.todo.todoList,\r\n\tsortType: (state) => state.todo.sortType,\r\n\tisReverseSort: (state) => state.todo.isReverseSort,\r\n}\r\n\r\n\r\nexport const getSortedTodoList = createSelector(\r\n\tTodoSelector.todoList, TodoSelector.sortType, TodoSelector.isReverseSort,\r\n\t(items, sortType, isReverse) => {\r\n\t\tlet list = [...items]\r\n\t\tswitch (sortType) {\r\n\t\t\tcase `date`:\r\n\t\t\t\tlist.sort((a, b) => a.id - b.id)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase `done`:\r\n\t\t\t\tlist.sort((a, b) => a.completed - b.completed)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t!isReverse\r\n\t\t\t\t? list\r\n\t\t\t\t: list.reverse()\r\n\t\t)\r\n\t})","import React, { memo, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { TodoItem } from '../TodoItem/TodoItem'\r\n\r\nimport { getSortedTodoList } from '../../slice/todos/todoSelector'\r\n\r\n\r\nconst TodoList = ({ ...props }) => {\r\n\tconst todoList = useSelector(getSortedTodoList)\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(`todoList`, JSON.stringify(todoList))\r\n\t}, [todoList])\r\n\r\n\r\n\treturn (\r\n\t\t<ul className={`list-group`}>\r\n\t\t\t{todoList.map(item => <TodoItem key={item.id} {...item} />)}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(TodoList)\r\n\r\nexport { Container as TodoList }","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\n\r\nconst SortBtn = ({ isActive, onSortedClick, typeSort, ...props }) => {\r\n\treturn (\r\n\t\t<button className={`btn btn-outline-primary ${isActive ? `active` : ``}`} onClick={() => onSortedClick(typeSort)}>{typeSort}</button>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(SortBtn)\r\n\r\nexport { Container as SortBtn }","import React, { useState, memo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { SortBtn } from '../SortBtn/SortBtn'\r\n\r\nimport { sortBy, doReverseSort } from '../../slice/todos/todoSlice'\r\n\r\n\r\nconst SortControls = ({ ...props }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { allSortType, sortType, isReverseSort } = useSelector((state) => state.todo)\r\n\r\n\tconst [activeSortBtn, setActiveSortBtn] = useState(sortType)\r\n\r\n\r\n\tconst onSortedClick = (sort) => {\r\n\t\tdispatch(sortBy({ sort }))\r\n\t\tsortType === sort\r\n\t\t\t? dispatch(doReverseSort({ isReverseSort: !isReverseSort }))\r\n\t\t\t: dispatch(doReverseSort({ isReverseSort: false })) && setActiveSortBtn(sort)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<section className={`btn-group mb-4`}>\r\n\t\t\t{allSortType\r\n\t\t\t\t.map(type => <SortBtn\r\n\t\t\t\t\tisActive={activeSortBtn === type}\r\n\t\t\t\t\tkey={`${Date.new}${type}`}\r\n\t\t\t\t\ttypeSort={type}\r\n\t\t\t\t\tonSortedClick={onSortedClick}\r\n\t\t\t\t\t{...props} />\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(SortControls)\r\n\r\nexport { Container as SortControls } \r\n","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\n\r\nimport { NewTodoItem } from '../NewTodoItem/NewTodoItem'\r\nimport { TodoList } from '../TodoList/TodoList'\r\nimport { SortControls } from '../SortControls/SortControls'\r\n\r\n\r\nconst Todo = ({ ...props }) => {\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<h2 className={`mb-4`}>Todo list</h2>\r\n\t\t\t<NewTodoItem />\r\n\t\t\t<SortControls />\r\n\t\t\t<TodoList />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Todo)\r\n\r\nexport { Container as Todo } ","import React, { memo } from 'react'\r\nimport { compose } from 'redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst Navbar = ({ ...props }) => {\r\n\treturn (\r\n\t\t<nav className={`navbar navbar-expand navbar-light bg-light`}>\r\n\t\t\t<ul className={`navbar-nav`}>\r\n\t\t\t\t<li className={`nav-item`}>\r\n\t\t\t\t\t<NavLink className={`navbar-brand`} to={`/todo`}>Todo list</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\n\r\nconst Container = compose(\r\n\tmemo\r\n)(Navbar)\r\n\r\nexport { Container as Navbar }","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport styles from './Preloader.module.css';\r\n\r\n\r\nexport const Preloader = () => {\r\n\treturn (\r\n\t\t<section className={styles.preloader}>\r\n\t\t\t<img src={preloader} alt='loading' />\r\n\t\t</section>\r\n\t)\r\n}","import React, { memo, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Route, Switch } from 'react-router-dom'\nimport { compose } from 'redux'\n\nimport { initializedSuccess } from '../slice/app/appSlice'\n\nimport { Todo } from '../component/Todo/Todo'\nimport { Navbar } from '../component/Navbar/Navbar'\nimport { Preloader } from '../common/Preloader/Preloader'\n\nimport styles from './App.module.scss'\n\n\nconst App = ({ ...props }) => {\n\tconst dispatch = useDispatch()\n\n\tconst { initialized } = useSelector((state) => state.app)\n\n\tuseEffect(() => {\n\t\tdispatch(initializedSuccess())\n\t}, [])\n\n\n\treturn (\n\t\t!initialized\n\t\t\t? <Preloader />\n\t\t\t: <>\n\t\t\t\t<header>\n\t\t\t\t\t<h1 className={`visually-hidden`}>Todo list</h1>\n\t\t\t\t\t<Navbar />\n\t\t\t\t</header>\n\t\t\t\t<main className={`${styles.app} container pt-4`}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path='/todo' render={() => <Todo />} />\n\t\t\t\t\t\t<Route path='/' exact render={() => <Todo />} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</main>\n\t\t\t\t<footer>\n\n\t\t\t\t</footer>\n\t\t\t</>\n\t)\n}\n\n\nexport default compose(\n\tmemo\n)(App)","import { combineReducers } from '@reduxjs/toolkit'\nimport { reducer as formReducer } from 'redux-form'\n\nimport appReducer from '../slice/app/appSlice'\nimport todoReducer from '../slice/todos/todoSlice'\n\nexport const rootReducer = combineReducers({\n    app: appReducer,\n    todo: todoReducer,\n    form: formReducer,\n})","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport { rootReducer } from './rootReducer'\r\n// import appReducer from './features/app/appSlice'\r\n// import todoReducer from './features/todos/todosSlice'\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n})\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./rootReducer', () => {\r\n        const newRootReducer = require('./rootReducer').default\r\n        store.replaceReducer(newRootReducer)\r\n    })\r\n}\r\n\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\n//HashRouter для gh-pages\nimport {HashRouter} from 'react-router-dom'\n\nimport store from './App/store'\n\nimport './index.css'\n\n\nconst render = () => {\n  const App = require('./App/App').default\n\n  ReactDOM.render(\n    <HashRouter basename={'https://cool1997.github.io/portfolio/'}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./App/App', render)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1k-Ht\",\"error\":\"FormsControls_error__bauyl\"};","import { createSlice } from '@reduxjs/toolkit'\n\n\nconst appSlice = createSlice({\n    name: `todos`,\n    initialState: {\n        initialized: false,\n    },\n    reducers: {\n        initializedSuccess(state, action) {\n            state.initialized = true\n        }\n    }\n})\n\n\nexport const { initializedSuccess } = appSlice.actions\n\nexport default appSlice.reducer"],"sourceRoot":""}